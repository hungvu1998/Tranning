// Generated by Dagger (https://google.github.io/dagger).
package com.example.tranning.di.main;

import com.example.tranning.network.MainApi;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class MainModule_ProvideMain2ApiFactory implements Factory<MainApi> {
  private final MainModule module;

  private final Provider<Retrofit> retrofitProvider;

  public MainModule_ProvideMain2ApiFactory(MainModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public MainApi get() {
    return provideInstance(module, retrofitProvider);
  }

  public static MainApi provideInstance(MainModule module, Provider<Retrofit> retrofitProvider) {
    return proxyProvideMain2Api(module, retrofitProvider.get());
  }

  public static MainModule_ProvideMain2ApiFactory create(
      MainModule module, Provider<Retrofit> retrofitProvider) {
    return new MainModule_ProvideMain2ApiFactory(module, retrofitProvider);
  }

  public static MainApi proxyProvideMain2Api(MainModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.provideMain2Api(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
