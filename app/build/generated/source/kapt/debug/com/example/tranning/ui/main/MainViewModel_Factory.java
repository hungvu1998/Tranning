// Generated by Dagger (https://google.github.io/dagger).
package com.example.tranning.ui.main;

import com.example.tranning.data.local.BreedDao;
import com.example.tranning.network.MainApi;
import com.example.tranning.util.Utils;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<MainApi> main2ApiProvider;

  private final Provider<Utils> utilsProvider;

  private final Provider<BreedDao> breedDaoProvider;

  public MainViewModel_Factory(
      Provider<MainApi> main2ApiProvider,
      Provider<Utils> utilsProvider,
      Provider<BreedDao> breedDaoProvider) {
    this.main2ApiProvider = main2ApiProvider;
    this.utilsProvider = utilsProvider;
    this.breedDaoProvider = breedDaoProvider;
  }

  @Override
  public MainViewModel get() {
    return provideInstance(main2ApiProvider, utilsProvider, breedDaoProvider);
  }

  public static MainViewModel provideInstance(
      Provider<MainApi> main2ApiProvider,
      Provider<Utils> utilsProvider,
      Provider<BreedDao> breedDaoProvider) {
    return new MainViewModel(main2ApiProvider.get(), utilsProvider.get(), breedDaoProvider.get());
  }

  public static MainViewModel_Factory create(
      Provider<MainApi> main2ApiProvider,
      Provider<Utils> utilsProvider,
      Provider<BreedDao> breedDaoProvider) {
    return new MainViewModel_Factory(main2ApiProvider, utilsProvider, breedDaoProvider);
  }

  public static MainViewModel newMainViewModel(MainApi main2Api, Utils utils, BreedDao breedDao) {
    return new MainViewModel(main2Api, utils, breedDao);
  }
}
