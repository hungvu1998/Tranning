// Generated by Dagger (https://google.github.io/dagger).
package com.example.tranning.di;

import android.app.Activity;
import android.app.Application;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import androidx.lifecycle.ViewModel;
import com.example.tranning.BaseApplication;
import com.example.tranning.ViewModelProvidersFactory;
import com.example.tranning.data.local.BreedDao;
import com.example.tranning.data.local.Database;
import com.example.tranning.di.main.MainModule;
import com.example.tranning.di.main.MainModule_ProvideMain2ApiFactory;
import com.example.tranning.ui.main.MainActivity;
import com.example.tranning.ui.main.MainActivity_MembersInjector;
import com.example.tranning.ui.main.MainViewModel;
import com.example.tranning.ui.main.MainViewModel_Factory;
import com.example.tranning.util.Utils;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuildersModule_ContributeMain2Activity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<Retrofit> provideRetrofitInstance$app_debugProvider;

  private Provider<Application> applicationProvider;

  private Provider<Utils> provideUtilsProvider;

  private Provider<Database> provideDatabase$app_debugProvider;

  private Provider<BreedDao> provideBreedDaoProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return ImmutableMap
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>of(
            MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        ImmutableMap
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                of());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        ImmutableMap
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                of());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        ImmutableMap
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>of());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        ImmutableMap
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                of());
  }

  private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        ImmutableMap
            .<Class<? extends androidx.fragment.app.Fragment>,
                Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
                of());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuildersModule_ContributeMain2Activity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuildersModule_ContributeMain2Activity.MainActivitySubcomponent.Builder
              get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.provideRetrofitInstance$app_debugProvider =
        DoubleCheck.provider(
            AppModule_ProvideRetrofitInstance$app_debugFactory.create(builder.appModule));
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideUtilsProvider =
        DoubleCheck.provider(
            AppModule_ProvideUtilsFactory.create(builder.appModule, applicationProvider));
    this.provideDatabase$app_debugProvider =
        DoubleCheck.provider(
            AppModule_ProvideDatabase$app_debugFactory.create(
                builder.appModule, applicationProvider));
    this.provideBreedDaoProvider =
        DoubleCheck.provider(
            AppModule_ProvideBreedDaoFactory.create(
                builder.appModule, provideDatabase$app_debugProvider));
  }

  @Override
  public void inject(BaseApplication arg0) {
    injectBaseApplication(arg0);
  }

  @CanIgnoreReturnValue
  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuildersModule_ContributeMain2Activity.MainActivitySubcomponent.Builder {
    private MainModule mainModule;

    private MainActivity seedInstance;

    @Override
    public ActivityBuildersModule_ContributeMain2Activity.MainActivitySubcomponent build() {
      if (mainModule == null) {
        this.mainModule = new MainModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuildersModule_ContributeMain2Activity.MainActivitySubcomponent {
    private MainModule_ProvideMain2ApiFactory provideMain2ApiProvider;

    private MainViewModel_Factory mainViewModelProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>>
        getMapOfClassOfAndProviderOfViewModel() {
      return ImmutableMap.<Class<? extends ViewModel>, Provider<ViewModel>>of(
          MainViewModel.class, (Provider) mainViewModelProvider);
    }

    private ViewModelProvidersFactory getViewModelProvidersFactory() {
      return new ViewModelProvidersFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.provideMain2ApiProvider =
          MainModule_ProvideMain2ApiFactory.create(
              builder.mainModule,
              DaggerAppComponent.this.provideRetrofitInstance$app_debugProvider);
      this.mainViewModelProvider =
          MainViewModel_Factory.create(
              provideMain2ApiProvider,
              DaggerAppComponent.this.provideUtilsProvider,
              DaggerAppComponent.this.provideBreedDaoProvider);
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      MainActivity_MembersInjector.injectProviderFactory(instance, getViewModelProvidersFactory());
      return instance;
    }
  }
}
